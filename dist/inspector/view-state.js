'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = exports.$ = exports.template = void 0;
const fs_1 = require("fs");
exports.template = `
<ui-prop type="dump" class="content"></ui-prop>
`;
exports.$ = {
    content: '.content',
};
const createSelectorProp = (labelText, selectorClassName, selectorDefaultValue, selectorOptions = [], selectCb = null) => {
    const selectorProp = document.createElement('ui-prop');
    const label = document.createElement('ui-label');
    label.setAttribute('slot', 'label');
    label.innerText = labelText;
    const selector = createSelector(selectorClassName, selectorDefaultValue, selectorOptions, selectCb);
    selectorProp.appendChild(label);
    selectorProp.appendChild(selector);
    return selectorProp;
};
const createSelector = (className, defaultValue, selectorOptions = [], selectCb = null) => {
    const selector = document.createElement('ui-select');
    selector.setAttribute('class', className);
    selector.setAttribute('slot', 'content');
    if (defaultValue) {
        selector.setAttribute('value', defaultValue);
    }
    selectorOptions.forEach((option) => {
        selector.appendChild(createOption(option));
    });
    selector.addEventListener('change', (event) => {
        var _a;
        //@ts-ignore
        selectCb && selectCb((_a = event.target) === null || _a === void 0 ? void 0 : _a.value);
    });
    selector.addEventListener('confirm', (event) => {
        var _a;
        //@ts-ignore
        selectCb && selectCb((_a = event.target) === null || _a === void 0 ? void 0 : _a.value);
    });
    return selector;
};
const createOption = (selectorOption) => {
    const option = document.createElement('option');
    option.setAttribute('value', selectorOption.value);
    option.innerText = selectorOption.text;
    return option;
};
async function update(dump) {
    var _a;
    this.dump = dump;
    const content = this.$.content;
    for (const key in dump.value) {
        const value = dump.value[key];
        let $prop = content.querySelector(`ui-prop[key=${key}]`);
        if ($prop) {
            $prop.hidden = !value.visible;
        }
        if (!value.visible) {
            continue;
        }
        if (!$prop) {
            $prop = document.createElement('ui-prop');
            $prop.setAttribute('key', key);
            $prop.setAttribute('type', 'dump');
            content.appendChild($prop);
        }
        $prop.render(value);
        if (key == "defaultClip") {
            const uuid = (_a = value === null || value === void 0 ? void 0 : value.value) === null || _a === void 0 ? void 0 : _a.uuid;
            if (uuid) {
                const assetInfo = await Editor.Message.request('asset-db', 'query-asset-info', uuid);
                if (assetInfo) {
                    const data = (0, fs_1.readFileSync)(assetInfo.file, 'utf8');
                    try {
                        const json = JSON.parse(data);
                        if (json && Array.isArray(json)) {
                            const clip = json.find(item => item.__type__ == "cc.AnimationClip");
                            if (clip) {
                                const clipEvents = clip._events;
                                if (clipEvents && Array.isArray(clipEvents)) {
                                    const map = new Map();
                                    for (const event of clipEvents) {
                                        const has = map.get(event.frame);
                                        if (has) {
                                            // 有名字的事件会替换掉没有名字的事件
                                            if (!has.func && event.func) {
                                                map.set(event.frame, event);
                                            }
                                        }
                                        else {
                                            map.set(event.frame, event);
                                        }
                                    }
                                    const events = Array.from(map.values());
                                    $prop = content.querySelector(`ui-prop[key=State]`);
                                    if ($prop) {
                                        const existingSelector = $prop.querySelector('ui-select');
                                        if (existingSelector) {
                                            // 记录当前选中的值
                                            const currentValue = existingSelector.getAttribute('value');
                                            // 清空现有options
                                            while (existingSelector.firstChild) {
                                                existingSelector.removeChild(existingSelector.firstChild);
                                            }
                                            // 添加新的options
                                            events.forEach((event, index) => {
                                                const option = createOption({
                                                    value: index.toString(),
                                                    text: event.func || "状态" + (index + 1)
                                                });
                                                existingSelector.appendChild(option);
                                            });
                                            // 恢复之前选中的值
                                            existingSelector.setAttribute('value', currentValue);
                                            await Editor.Message.request('scene', 'execute-component-method', {
                                                uuid: dump.value.uuid.value,
                                                name: 'editorChangeState',
                                                args: currentValue,
                                            });
                                        }
                                        return;
                                    }
                                    $prop = createSelectorProp("State", "event", "0", events.map((event, index) => ({ value: index.toString(), text: event.func || "状态" + (index + 1) })), async (v) => {
                                        await Editor.Message.request('scene', 'execute-component-method', {
                                            uuid: dump.value.uuid.value,
                                            name: 'editorChangeState',
                                            args: v,
                                        });
                                    });
                                    $prop.setAttribute("key", "State");
                                    content.appendChild($prop);
                                    const state = await Editor.Message.request('scene', 'execute-component-method', {
                                        uuid: dump.value.uuid.value,
                                        name: 'editorGetState',
                                    });
                                    const selector = $prop.querySelector('ui-select');
                                    if (selector) {
                                        selector.setAttribute('value', state);
                                        await Editor.Message.request('scene', 'execute-component-method', {
                                            uuid: dump.value.uuid.value,
                                            name: 'editorChangeState',
                                            args: state,
                                        });
                                    }
                                }
                            }
                        }
                    }
                    catch (error) {
                        console.error("Failed to parse view state data:", error);
                    }
                }
            }
        }
    }
}
exports.update = update;
//# sourceMappingURL=data:application/json;base64,